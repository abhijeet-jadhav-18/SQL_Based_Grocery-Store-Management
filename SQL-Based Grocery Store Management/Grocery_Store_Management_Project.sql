CREATE DATABASE grocery_store;
USE grocery_store;

-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY AUTO_INCREMENT,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY AUTO_INCREMENT,
    cat_name VARCHAR(255)
);


-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY AUTO_INCREMENT,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

describe employees;


-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY AUTO_INCREMENT,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY AUTO_INCREMENT,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);


-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY AUTO_INCREMENT,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

# checking data has been imported or not
call all_tables_data; # this is the function that i've created for viewing all tables data

select * from supplier;
select * from categories;
select * from products;
select * from customers;
select * from employees;
select * from orders;
select * from order_details; 


######## Customer Insights ########
-- 1. How many unique customers have placed orders?

# select count(cust_id) from orders ;
# select count(cust_id) from customers;
select count(distinct cust_id) AS unique_customers
from orders;


-- 2. Which customers have placed the highest number of orders?

SELECT c.cust_id, c.cust_name, 
COUNT(o.ord_id) AS total_orders
FROM customers c
INNER JOIN orders o
ON c.cust_id=o.cust_id
GROUP BY c.cust_id
ORDER BY total_orders DESC LIMIT 1;

-- 3. what is the total and average purchase value per customers?
call all_tables_data;

SELECT o.cust_id, c.cust_name,
SUM(od.total_price) AS total_purchase,
AVG(od.total_price) AS avg_purchase
FROM orders o
INNER JOIN order_details od
ON o.ord_id= od.ord_id
INNER JOIN customers c
ON o.cust_id= c.cust_id
GROUP BY o.cust_id;



-- 4. Who are the top 5 customers by total purchase amount ?
select o.cust_id,c.cust_name,
SUM(od.total_price) as total_purchase
from orders o
inner join order_details od
on  o.ord_id=od.ord_id
inner join customers c
on o.cust_id=c.cust_id
group by o.cust_id
order by total_purchase desc
limit 5;

######## Product Performance ########
# Evaluate how well products are performing in terms of sales and revenue.

-- 1.	How many products exist in each category?

SELECT c.cat_id, c.cat_name,
COUNT(p.prod_id) AS total_products
FROM categories c
LEFT JOIN products p
ON c.cat_id= p.cat_id
GROUP BY c.cat_id;

-- 2.	What is the average price of products by category?

SELECT c.cat_id, c.cat_name,
AVG(p.price) AS avg_price
FROM categories c
LEFT JOIN products p
ON c.cat_id= p.cat_id
GROUP BY c.cat_id;

-- 3.	Which products have the highest total sales volume (by quantity)?

SELECT p.prod_name,
SUM(quantity) AS high_sales
FROM order_details od
LEFT JOIN products p
ON od.prod_id= p.prod_id
GROUP BY prod_name
ORDER BY high_sales DESC
LIMIT 1;

-- 4.	What is the total revenue generated by each product?

SELECT SUM(od.total_price) AS total_revenue,
p.prod_name
FROM order_details od
LEFT JOIN products p
ON od.prod_id= p.prod_id
GROUP BY prod_name;

-- 5.	How do product sales vary by category and supplier?

SELECT c.cat_name, s.sup_name,
SUM(od.total_price) AS total_sales
FROM order_details od
INNER JOIN products p
ON od.prod_id= p.prod_id
INNER JOIN categories c
ON p.cat_id= c.cat_id
INNER JOIN supplier s
ON p.sup_id= s.sup_id
GROUP BY c.cat_name, s.sup_name
ORDER BY c.cat_name, total_sales 
DESC;

######## Sales and Order Trends ########
# Analyze business performance through orders and revenue over time.

-- 1.	How many orders have been placed in total?

SELECT COUNT(*) AS total_orders
FROM orders;

-- 2.	What is the average value per order?

SELECT SUM(total_price)/COUNT(DISTINCT ord_id) AS avg_ord_value
FROM order_details;

-- 3.   On which dates were the most orders placed?

SELECT order_date, COUNT(ord_id) AS ord_count
FROM orders 
GROUP BY order_date
ORDER BY ord_count DESC
LIMIT 1;

-- 4.	What are the monthly trends in order volume and revenue?

SELECT 
LEFT(o.order_date, 7) AS ord_month,
COUNT(DISTINCT o.ord_id) AS ord_volume,
SUM(od.total_price) AS total_revenue
FROM orders o
INNER JOIN order_details od
ON o.ord_id= od.ord_id
GROUP BY ord_month
ORDER BY ord_month;

-- 5.	How do order patterns vary across weekdays and weekends?
SET Sql_safe_updates=0;

ALTER TABLE orders ADD COLUMN date_converted DATE;
UPDATE orders
SET date_converted = STR_TO_DATE(order_date, '%m/%d/%Y');

SELECT 
DayName (STR_TO_DATE(order_date, "%m/%d/%y")) AS weekday,
MonthName (STR_TO_DATE(order_date, "%m/%d/%y")) AS month_,
COUNT(ord_id) AS total_orders
FROM orders
GROUP BY weekday, month_
ORDER BY weekday, month_;


-- 6. How many suppliers are there in the database

select count(*) from supplier;

-- 7. which suppliers provides the most products?

select  s.sup_id, s.sup_name,
count(p.prod_id) as product_count
from supplier s
inner join products p
on s.sup_id=p.sup_id
group by  s.sup_id
order by product_count desc
limit 1;

-- 8. What is the average price of products from each supliers ?

select s.sup_id,s.sup_name,AVG(p.price)
from products p
inner join supplier s
on s.sup_id=p.sup_id
group by s.sup_id;


-- 9. which suppliers contributes the most to total product sales ( by revenue)

select s.sup_id,s.sup_name,
SUM(od.total_price) as total_revenue
from supplier s
inner join products p
on s.sup_id=p.sup_id
inner join order_details od
on p.prod_id=od.prod_id
group by s.sup_id
order by total_revenue desc
limit 1;

## 5Ô∏è. Employee Performance
# Assess how employees are handling and influencing sales.

-- 1. How many employees have processed orders?
select count(distinct emp_id) from orders;

-- 2.Which employees have handled the most orders?

select e.emp_id,e.emp_name,
count(o.ord_id) as ordered_most
from orders o
inner join employees e
on o.emp_id=e.emp_id
group by e.emp_id
order by ordered_most desc
limit 1;

-- 3. What is the total sales value processed by each employee?

select e.emp_id,e.emp_name,
count(od.total_price) as total_sales
from employees e
inner join orders o
on e.emp_id=o.emp_id
inner join order_details od
on o.ord_id = od.ord_id
group by e.emp_id
order by total_sales desc;


-- 4.What is the average order value handled per employee?

select e.emp_id, e.emp_name,
sum(od.total_price)/count(distinct o.ord_id) as avg_value
from employees e
inner join orders o
on e.emp_id=o.emp_id
inner join order_details od
on o.ord_id=od.ord_id
group by e.emp_id
order by avg_value desc;


## Order Details Deep Dive ##
# Explore item-level sales patterns and pricing behavior.

-- 1.What is the relationship between quantity ordered and total price?

select quantity,
avg(od.total_price) as avg_total_price,
count(*) as order_count
from order_details od
group by quantity
order by quantity;


-- 2. What is the average quantity ordered per product?


select p.prod_id,p.prod_name,
count(od.ord_id) as total_orders,
avg(od.quantity) as avg_quantity_ordered
from products p
inner join order_details od
on p.prod_id=od.prod_id
group by p.prod_id
order by avg_quantity_ordered;

-- 3.How does the unit price vary across products and orders?

select p.prod_id,p.prod_name,
od.each_price as unit_price,
count(od.ord_id) as times_ordered
from products p
inner join order_details od
on p.prod_id= od.prod_id
group by p.prod_id, od.each_price
order by p.prod_id, od.each_price


describe categories;
describe customers;
describe employees;
describe order_details;
describe orders;
describe products;
describe supplier;